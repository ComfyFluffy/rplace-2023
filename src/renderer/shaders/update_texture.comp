#version 460

struct Coordinate {
  uint tag;
  uvec4 data;
};

struct PixelData {
  uint miliseconds_since_first_pixel;
  Coordinate coordinate;
  uvec3 color;
};

layout(std430, binding = 0) buffer PixelUpdates { PixelData pixel_updates[]; };
layout(binding = 1, rgba8) writeonly uniform image2D texture_out;
layout(std430, binding = 2) buffer LastIndex {
  int last_index_for_coordinate[];
};
layout(binding = 3) uniform CanvasSize { uvec2 canvas_size; };

void store_pixel_to_texture(int index, uvec2 coordinate, uvec3 color) {
  int idx = atomicMax(
      last_index_for_coordinate[coordinate.x + coordinate.y * canvas_size.x],
      index);
  // It seems this could cause a race condition, but it's probably not a
  // problem.
  if (idx > index) {
    return; // This pixel has already been updated by a newer pixel.
  }
  imageStore(texture_out, ivec2(coordinate), vec4(vec3(color) / 255.0, 1.0));
}

// Helper function for Quad
void fillQuad(int index, uvec2 start, uvec2 end, uvec3 color) {
  for (uint x = start.x; x < end.x; ++x) {
    for (uint y = start.y; y < end.y; ++y) {
      store_pixel_to_texture(index, uvec2(x, y), color);
    }
  }
}

// Helper function for Circle
void fillCircle(int index, uvec2 center, uint radius, uvec3 color) {
  int minX = max(int(center.x) - int(radius), 0);
  int minY = max(int(center.y) - int(radius), 0);
  int maxX = min(int(center.x) + int(radius), int(canvas_size.x) - 1);
  int maxY = min(int(center.y) + int(radius), int(canvas_size.y) - 1);

  for (int x = minX; x <= maxX; x++) {
    for (int y = minY; y <= maxY; y++) {
      int dx = x - int(center.x);
      int dy = y - int(center.y);

      // Check if the pixel is within the circle's radius
      if (dx * dx + dy * dy <= int(radius) * int(radius)) {
        store_pixel_to_texture(index, uvec2(x, y), color);
      }
    }
  }
}

// Main compute shader function
layout(local_size_x = 256) in;
void main() {
  int id = int(gl_GlobalInvocationID.x);
  PixelData pixel_data = pixel_updates[id];

  switch (pixel_data.coordinate.tag) {
  case 0u:
    store_pixel_to_texture(id, pixel_data.coordinate.data.xy, pixel_data.color);
    break;
  case 1u:
    fillQuad(id, pixel_data.coordinate.data.xy, pixel_data.coordinate.data.zw,
             pixel_data.color);
    break;
  case 2u:
    fillCircle(id, pixel_data.coordinate.data.xy, pixel_data.coordinate.data.z,
               pixel_data.color);
    break;
  default:
    break;
  }
}
